{"ast":null,"code":"var _jsxFileName = \"/Users/coby/projects/movie_recommendation/cinematch/frontend_test/chat-app/src/components/ChatUI.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"react-chat-elements/dist/main.css\";\nimport { MessageBox, Input, Button } from \"react-chat-elements\";\nimport CustomMessage from \"./CustomMessage\"; // Import your custom message component\nimport \"./ChatComponent.css\";\nimport ApiNotFound from \"./ApiNotFound.js\";\nimport TypingInd from \"./TypingIndicator.js\";\nimport \"./ChatComponent.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ChatComponent = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [alive, setAlive] = useState(true);\n  useEffect(() => {\n    const checkStatus = async () => {\n      fetch(\"http://localhost:5001/health\", {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"Application/json\"\n        }\n      }).then(response => response.json()).then(data => {\n        console.log(data);\n        if (data.status === \"up\") {\n          setAlive(true);\n        } else {\n          setAlive(false);\n        }\n      }).catch(error => {\n        console.error(\"API check failed\", error);\n        setAlive(false);\n      });\n    };\n\n    // Call the checkStatus function\n    checkStatus();\n    const interval = setInterval(checkStatus, 10000); // Check every 10 seconds\n    return () => clearInterval(interval); // Cleanup interval on unmount\n  }, []); // The empty array causes this effect to only run on mount and unmount\n\n  const sendMessage = content => {\n    setIsLoading(true);\n    const newMessage = {\n      position: \"right\",\n      type: \"text\",\n      text: inputValue,\n      // Use inputValue from the state\n      date: new Date()\n    };\n    setMessages([...messages, newMessage]);\n    setInputValue(\"\");\n    fetch(\"http://localhost:5001/recommend\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        message: inputValue\n      }) // Use inputValue here\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return response.json();\n    }).then(responseData => {\n      const botMessage = {\n        position: \"left\",\n        type: \"text\",\n        text: responseData.response,\n        // Use inputValue from the state\n        date: new Date()\n      };\n      // Add the bot's response message\n      setMessages(prevMessages => [...prevMessages, botMessage]);\n    }).catch(error => {\n      console.error(\"Could not send the message to the API\", error);\n    }).finally(() => {\n      setIsLoading(false); // End loading\n    });\n  };\n  const handleKeyPress = e => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      // Send message on Enter key, but not when Shift is held\n      e.preventDefault();\n      sendMessage();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: alive ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages-container\",\n        children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(CustomMessage, {\n          text: msg.text,\n          position: msg.position,\n          dateString: msg.date.toLocaleTimeString(),\n          isUserMessage: msg.position === \"right\"\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        placeholder: \"Type here...\",\n        value: inputValue,\n        onChange: e => setInputValue(e.target.value),\n        onKeyPress: handleKeyPress // Add the key press handler\n        ,\n        rightButtons: /*#__PURE__*/_jsxDEV(Button, {\n          color: \"white\",\n          backgroundColor: \"black\",\n          text: \"Send\",\n          onClick: sendMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(ApiNotFound, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatComponent, \"1LJZt09NcveG6Px2CE5YGhvpHPY=\");\n_c = ChatComponent;\nexport default ChatComponent;\nvar _c;\n$RefreshReg$(_c, \"ChatComponent\");","map":{"version":3,"names":["React","useState","useEffect","MessageBox","Input","Button","CustomMessage","ApiNotFound","TypingInd","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatComponent","_s","messages","setMessages","inputValue","setInputValue","isLoading","setIsLoading","alive","setAlive","checkStatus","fetch","method","headers","then","response","json","data","console","log","status","catch","error","interval","setInterval","clearInterval","sendMessage","content","newMessage","position","type","text","date","Date","body","JSON","stringify","message","ok","Error","responseData","botMessage","prevMessages","finally","handleKeyPress","e","key","shiftKey","preventDefault","className","children","map","msg","index","dateString","toLocaleTimeString","isUserMessage","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","value","onChange","target","onKeyPress","rightButtons","color","backgroundColor","onClick","_c","$RefreshReg$"],"sources":["/Users/coby/projects/movie_recommendation/cinematch/frontend_test/chat-app/src/components/ChatUI.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"react-chat-elements/dist/main.css\";\nimport { MessageBox, Input, Button } from \"react-chat-elements\";\nimport CustomMessage from \"./CustomMessage\"; // Import your custom message component\nimport \"./ChatComponent.css\";\nimport ApiNotFound from \"./ApiNotFound.js\";\nimport TypingInd from \"./TypingIndicator.js\";\nimport \"./ChatComponent.css\";\n\nconst ChatComponent = () => {\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [alive, setAlive] = useState(true);\n\n  useEffect(() => {\n    const checkStatus = async () => {\n      fetch(\"http://localhost:5001/health\", {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"Application/json\",\n        },\n      })\n        .then((response) => response.json())\n        .then((data) => {\n          console.log(data);\n          if (data.status === \"up\") {\n            setAlive(true);\n          } else {\n            setAlive(false);\n          }\n        })\n        .catch((error) => {\n          console.error(\"API check failed\", error);\n          setAlive(false);\n        });\n    };\n\n    // Call the checkStatus function\n    checkStatus();\n\n    const interval = setInterval(checkStatus, 10000); // Check every 10 seconds\n    return () => clearInterval(interval); // Cleanup interval on unmount\n  }, []); // The empty array causes this effect to only run on mount and unmount\n\n  const sendMessage = (content) => {\n    setIsLoading(true);\n\n    const newMessage = {\n      position: \"right\",\n      type: \"text\",\n      text: inputValue, // Use inputValue from the state\n      date: new Date(),\n    };\n    setMessages([...messages, newMessage]);\n    setInputValue(\"\");\n\n    fetch(\"http://localhost:5001/recommend\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ message: inputValue }), // Use inputValue here\n    })\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        return response.json();\n      })\n      .then((responseData) => {\n        const botMessage = {\n          position: \"left\",\n          type: \"text\",\n          text: responseData.response, // Use inputValue from the state\n          date: new Date(),\n        };\n        // Add the bot's response message\n        setMessages((prevMessages) => [...prevMessages, botMessage]);\n      })\n      .catch((error) => {\n        console.error(\"Could not send the message to the API\", error);\n      })\n      .finally(() => {\n        setIsLoading(false); // End loading\n      });\n  };\n\n  const handleKeyPress = (e) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      // Send message on Enter key, but not when Shift is held\n      e.preventDefault();\n      sendMessage();\n    }\n  };\n\n  return (\n    <div className=\"chat-container\">\n      {alive ? (\n        <>\n          <div className=\"messages-container\">\n            {messages.map((msg, index) => (\n              <CustomMessage\n                key={index}\n                text={msg.text}\n                position={msg.position}\n                dateString={msg.date.toLocaleTimeString()}\n                isUserMessage={msg.position === \"right\"}\n              />\n            ))}\n          </div>\n          <Input\n            placeholder=\"Type here...\"\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n            onKeyPress={handleKeyPress} // Add the key press handler\n            rightButtons={\n              <Button\n                color=\"white\"\n                backgroundColor=\"black\"\n                text=\"Send\"\n                onClick={sendMessage}\n              />\n            }\n          />\n        </>\n      ) : (\n        <ApiNotFound />\n      )}\n    </div>\n  );\n};\n\nexport default ChatComponent;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}