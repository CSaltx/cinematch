{"ast":null,"code":"var _jsxFileName = \"/Users/coby/projects/movie_recommendation/cinematch/frontend/chat-app/src/components/ChatUI.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { ChatContainer, Conversation, ConversationContent,\n// Import ConversationContent\nMessageList, MessageInput, ConversationHeader, Message, Loader } from \"@chatscope/chat-ui-kit-react\";\nimport ApiNotFound from \"./ApiNotFound.js\";\nimport TypingInd from \"./TypingIndicator.js\";\nimport \"@chatscope/chat-ui-kit-styles/dist/default/styles.min.css\";\nimport \"./ChatComponent.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatComponent = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [alive, setAlive] = useState(true);\n  useEffect(() => {\n    const checkStatus = async () => {\n      try {\n        fetch(\"http://localhost:5001/health\", {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"Application/json\"\n          }\n        }).then(response => response.json()).then(data => {\n          console.log(data);\n          if (data.status === \"up\") {\n            setAlive(true);\n          } else {\n            setAlive(false);\n          }\n        }).catch(error => {\n          console.error(\"API check failed\", error);\n          setAlive(false);\n        });\n      } catch (error) {\n        console.error(\"API check failed\", error);\n        setAlive(false);\n      }\n    };\n\n    // Call the checkStatus function\n    checkStatus();\n    const interval = setInterval(checkStatus, 10000); // Check every 10 seconds\n    return () => clearInterval(interval); // Cleanup interval on unmount\n  }, []); // The empty array causes this effect to only run on mount and unmount\n\n  const sendMessage = content => {\n    setIsLoading(true);\n    const userMessage = {\n      message: content,\n      direction: \"outgoing\",\n      sender: \"Me\" // Add sender property\n    };\n\n    setMessages(prevMessages => [...prevMessages, userMessage]);\n\n    // fetch(\"http://localhost:5001/recommend\", {\n    //   method: \"POST\",\n    //   headers: {\n    //     \"Content-Type\": \"application/json\",\n    //   },\n    //   body: JSON.stringify({ message: content }),\n    // })\n    //   .then((response) => {\n    //     if (!response.ok) {\n    //       throw new Error(`HTTP error! status: ${response.status}`);\n    //     }\n    //     return response.json();\n    //   })\n    //   .then((responseData) => {\n    //     const botMessage = {\n    //       message: responseData.response,\n    //       direction: \"incoming\",\n    //       sender: \"Chatbot\", // Add sender property\n    //     };\n    //     // Add the bot's response message\n    //     setMessages((prevMessages) => [...prevMessages, botMessage]);\n    //   })\n    //   .catch((error) => {\n    //     console.error(\"Could not send the message to the API\", error);\n    //   })\n    //   .finally(() => {\n    //     setIsLoading(false); // End loading\n    //   });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: alive ? /*#__PURE__*/_jsxDEV(ChatContainer, {\n      children: /*#__PURE__*/_jsxDEV(Conversation, {\n        children: [/*#__PURE__*/_jsxDEV(ConversationHeader, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ConversationContent, {\n          children: [\" \", /*#__PURE__*/_jsxDEV(MessageList, {\n            typingIndicator: isLoading && /*#__PURE__*/_jsxDEV(TypingInd, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 58\n            }, this),\n            children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(Message, {\n              model: {\n                message: msg.message,\n                direction: msg.direction,\n                sender: msg.sender\n              }\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n            placeholder: \"Type message here\",\n            onSend: sendMessage,\n            attachButton: false\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(ApiNotFound, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatComponent, \"Tp6Y8EWPvbm/W1V5rs2GE05yev0=\");\n_c = ChatComponent;\nexport default ChatComponent;\nvar _c;\n$RefreshReg$(_c, \"ChatComponent\");","map":{"version":3,"names":["React","useState","useEffect","ChatContainer","Conversation","ConversationContent","MessageList","MessageInput","ConversationHeader","Message","Loader","ApiNotFound","TypingInd","jsxDEV","_jsxDEV","ChatComponent","_s","messages","setMessages","isLoading","setIsLoading","alive","setAlive","checkStatus","fetch","method","headers","then","response","json","data","console","log","status","catch","error","interval","setInterval","clearInterval","sendMessage","content","userMessage","message","direction","sender","prevMessages","className","children","fileName","_jsxFileName","lineNumber","columnNumber","typingIndicator","map","msg","index","model","placeholder","onSend","attachButton","_c","$RefreshReg$"],"sources":["/Users/coby/projects/movie_recommendation/cinematch/frontend/chat-app/src/components/ChatUI.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  ChatContainer,\n  Conversation,\n  ConversationContent, // Import ConversationContent\n  MessageList,\n  MessageInput,\n  ConversationHeader,\n  Message,\n  Loader,\n} from \"@chatscope/chat-ui-kit-react\";\nimport ApiNotFound from \"./ApiNotFound.js\";\nimport TypingInd from \"./TypingIndicator.js\";\nimport \"@chatscope/chat-ui-kit-styles/dist/default/styles.min.css\";\nimport \"./ChatComponent.css\";\n\nconst ChatComponent = () => {\n  const [messages, setMessages] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [alive, setAlive] = useState(true);\n\n  useEffect(() => {\n    const checkStatus = async () => {\n      try {\n        fetch(\"http://localhost:5001/health\", {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"Application/json\",\n          },\n        })\n          .then((response) => response.json())\n          .then((data) => {\n            console.log(data);\n            if (data.status === \"up\") {\n              setAlive(true);\n            } else {\n              setAlive(false);\n            }\n          })\n          .catch((error) => {\n            console.error(\"API check failed\", error);\n            setAlive(false);\n          });\n      } catch (error) {\n        console.error(\"API check failed\", error);\n        setAlive(false);\n      }\n    };\n\n    // Call the checkStatus function\n    checkStatus();\n\n    const interval = setInterval(checkStatus, 10000); // Check every 10 seconds\n    return () => clearInterval(interval); // Cleanup interval on unmount\n  }, []); // The empty array causes this effect to only run on mount and unmount\n\n  const sendMessage = (content) => {\n    setIsLoading(true);\n\n    const userMessage = {\n      message: content,\n      direction: \"outgoing\",\n      sender: \"Me\", // Add sender property\n    };\n\n    setMessages((prevMessages) => [...prevMessages, userMessage]);\n\n    // fetch(\"http://localhost:5001/recommend\", {\n    //   method: \"POST\",\n    //   headers: {\n    //     \"Content-Type\": \"application/json\",\n    //   },\n    //   body: JSON.stringify({ message: content }),\n    // })\n    //   .then((response) => {\n    //     if (!response.ok) {\n    //       throw new Error(`HTTP error! status: ${response.status}`);\n    //     }\n    //     return response.json();\n    //   })\n    //   .then((responseData) => {\n    //     const botMessage = {\n    //       message: responseData.response,\n    //       direction: \"incoming\",\n    //       sender: \"Chatbot\", // Add sender property\n    //     };\n    //     // Add the bot's response message\n    //     setMessages((prevMessages) => [...prevMessages, botMessage]);\n    //   })\n    //   .catch((error) => {\n    //     console.error(\"Could not send the message to the API\", error);\n    //   })\n    //   .finally(() => {\n    //     setIsLoading(false); // End loading\n    //   });\n  };\n\n  return (\n    <div className=\"chat-container\">\n      {alive ? (\n        <ChatContainer>\n          <Conversation>\n            <ConversationHeader>\n              {/* Place your conversation header content here */}\n            </ConversationHeader>\n            <ConversationContent>\n              {\" \"}\n              {/* Add this wrapper */}\n              <MessageList typingIndicator={isLoading && <TypingInd />}>\n                {messages.map((msg, index) => (\n                  <Message\n                    key={index}\n                    model={{\n                      message: msg.message,\n                      direction: msg.direction,\n                      sender: msg.sender,\n                    }}\n                  />\n                ))}\n              </MessageList>\n              <MessageInput\n                placeholder=\"Type message here\"\n                onSend={sendMessage}\n                attachButton={false}\n              />\n            </ConversationContent>\n          </Conversation>\n        </ChatContainer>\n      ) : (\n        <ApiNotFound />\n      )}\n    </div>\n  );\n};\n\nexport default ChatComponent;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}