{"ast":null,"code":"var _jsxFileName = \"/Users/coby/projects/movie_recommendation/cinematch/frontend/chat-app/src/components/ChatUI.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { MessageBox, ChatItem, Input, Button, SystemMessage } from \"react-chat-elements\";\nimport \"react-chat-elements/dist/main.css\";\nimport ApiNotFound from \"./ApiNotFound.js\";\nimport TypingInd from \"./TypingIndicator.js\";\nimport \"./ChatComponent.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatComponent = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [alive, setAlive] = useState(true);\n  useEffect(() => {\n    const checkStatus = async () => {\n      try {\n        fetch(\"http://localhost:5001/health\", {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"Application/json\"\n          }\n        }).then(response => response.json()).then(data => {\n          console.log(data);\n          if (data.status === \"up\") {\n            setAlive(true);\n          } else {\n            setAlive(false);\n          }\n        }).catch(error => {\n          console.error(\"API check failed\", error);\n          setAlive(false);\n        });\n      } catch (error) {\n        console.error(\"API check failed\", error);\n        setAlive(false);\n      }\n    };\n\n    // Call the checkStatus function\n    checkStatus();\n    const interval = setInterval(checkStatus, 10000); // Check every 10 seconds\n    return () => clearInterval(interval); // Cleanup interval on unmount\n  }, []); // The empty array causes this effect to only run on mount and unmount\n\n  const sendMessage = content => {\n    setIsLoading(true);\n    const newMessage = {\n      position: \"right\",\n      type: \"text\",\n      text: inputValue,\n      date: new Date()\n    };\n    setMessages([...messages, newMessage]);\n    setInputValue(\"\");\n\n    // fetch(\"http://localhost:5001/recommend\", {\n    //   method: \"POST\",\n    //   headers: {\n    //     \"Content-Type\": \"application/json\",\n    //   },\n    //   body: JSON.stringify({ message: content }),\n    // })\n    //   .then((response) => {\n    //     if (!response.ok) {\n    //       throw new Error(`HTTP error! status: ${response.status}`);\n    //     }\n    //     return response.json();\n    //   })\n    //   .then((responseData) => {\n    //     const botMessage = {\n    //       message: responseData.response,\n    //       direction: \"incoming\",\n    //       sender: \"Chatbot\", // Add sender property\n    //     };\n    //     // Add the bot's response message\n    //     setMessages((prevMessages) => [...prevMessages, botMessage]);\n    //   })\n    //   .catch((error) => {\n    //     console.error(\"Could not send the message to the API\", error);\n    //   })\n    //   .finally(() => {\n    //     setIsLoading(false); // End loading\n    //   });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages-container\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(CustomMessage, {\n        text: msg.text,\n        position: msg.position,\n        dateString: msg.date.toLocaleTimeString()\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Input, {\n      placeholder: \"Type here...\",\n      value: inputValue,\n      onChange: e => setInputValue(e.target.value),\n      rightButtons: /*#__PURE__*/_jsxDEV(Button, {\n        color: \"white\",\n        backgroundColor: \"black\",\n        text: \"Send\",\n        onClick: sendMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatComponent, \"1LJZt09NcveG6Px2CE5YGhvpHPY=\");\n_c = ChatComponent;\nexport default ChatComponent;\nvar _c;\n$RefreshReg$(_c, \"ChatComponent\");","map":{"version":3,"names":["React","useState","useEffect","MessageBox","ChatItem","Input","Button","SystemMessage","ApiNotFound","TypingInd","jsxDEV","_jsxDEV","ChatComponent","_s","messages","setMessages","inputValue","setInputValue","isLoading","setIsLoading","alive","setAlive","checkStatus","fetch","method","headers","then","response","json","data","console","log","status","catch","error","interval","setInterval","clearInterval","sendMessage","content","newMessage","position","type","text","date","Date","className","children","map","msg","index","CustomMessage","dateString","toLocaleTimeString","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","value","onChange","e","target","rightButtons","color","backgroundColor","onClick","_c","$RefreshReg$"],"sources":["/Users/coby/projects/movie_recommendation/cinematch/frontend/chat-app/src/components/ChatUI.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  MessageBox,\n  ChatItem,\n  Input,\n  Button,\n  SystemMessage,\n} from \"react-chat-elements\";\nimport \"react-chat-elements/dist/main.css\";\nimport ApiNotFound from \"./ApiNotFound.js\";\nimport TypingInd from \"./TypingIndicator.js\";\nimport \"./ChatComponent.css\";\n\nconst ChatComponent = () => {\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [alive, setAlive] = useState(true);\n\n  useEffect(() => {\n    const checkStatus = async () => {\n      try {\n        fetch(\"http://localhost:5001/health\", {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"Application/json\",\n          },\n        })\n          .then((response) => response.json())\n          .then((data) => {\n            console.log(data);\n            if (data.status === \"up\") {\n              setAlive(true);\n            } else {\n              setAlive(false);\n            }\n          })\n          .catch((error) => {\n            console.error(\"API check failed\", error);\n            setAlive(false);\n          });\n      } catch (error) {\n        console.error(\"API check failed\", error);\n        setAlive(false);\n      }\n    };\n\n    // Call the checkStatus function\n    checkStatus();\n\n    const interval = setInterval(checkStatus, 10000); // Check every 10 seconds\n    return () => clearInterval(interval); // Cleanup interval on unmount\n  }, []); // The empty array causes this effect to only run on mount and unmount\n\n  const sendMessage = (content) => {\n    setIsLoading(true);\n\n    const newMessage = {\n      position: \"right\",\n      type: \"text\",\n      text: inputValue,\n      date: new Date(),\n    };\n    setMessages([...messages, newMessage]);\n    setInputValue(\"\");\n\n    // fetch(\"http://localhost:5001/recommend\", {\n    //   method: \"POST\",\n    //   headers: {\n    //     \"Content-Type\": \"application/json\",\n    //   },\n    //   body: JSON.stringify({ message: content }),\n    // })\n    //   .then((response) => {\n    //     if (!response.ok) {\n    //       throw new Error(`HTTP error! status: ${response.status}`);\n    //     }\n    //     return response.json();\n    //   })\n    //   .then((responseData) => {\n    //     const botMessage = {\n    //       message: responseData.response,\n    //       direction: \"incoming\",\n    //       sender: \"Chatbot\", // Add sender property\n    //     };\n    //     // Add the bot's response message\n    //     setMessages((prevMessages) => [...prevMessages, botMessage]);\n    //   })\n    //   .catch((error) => {\n    //     console.error(\"Could not send the message to the API\", error);\n    //   })\n    //   .finally(() => {\n    //     setIsLoading(false); // End loading\n    //   });\n  };\n\n  return (\n    <div className=\"chat-container\">\n      <div className=\"messages-container\">\n        {messages.map((msg, index) => (\n          <CustomMessage\n            key={index}\n            text={msg.text}\n            position={msg.position}\n            dateString={msg.date.toLocaleTimeString()}\n          />\n        ))}\n      </div>\n      <Input\n        placeholder=\"Type here...\"\n        value={inputValue}\n        onChange={(e) => setInputValue(e.target.value)}\n        rightButtons={\n          <Button\n            color=\"white\"\n            backgroundColor=\"black\"\n            text=\"Send\"\n            onClick={sendMessage}\n          />\n        }\n      />\n    </div>\n  );\n};\n\nexport default ChatComponent;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}