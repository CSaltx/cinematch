{"ast":null,"code":"var _jsxFileName = \"/Users/coby/projects/movie_recommendation/cinematch/frontend/chat-app/src/components/ChatUI.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { ChatContainer, MessageList, MessageInput, ConversationHeader, Message, Loader } from \"@chatscope/chat-ui-kit-react\";\nimport ApiNotFound from \"./ApiNotFound.js\";\nimport \"@chatscope/chat-ui-kit-styles/dist/default/styles.min.css\"; // Ensure you import the styles\nimport \"./ChatComponent.css\"; // Import your custom CSS for this component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ChatComponent = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [alive, setAlive] = useState(false);\n  useEffect(() => {\n    const checkStatus = async () => {\n      try {\n        const response = await fetch(\"http://localhost:5000/health\");\n        if (response.ok) {\n          console.log(\"API IS UP\");\n          const data = await response.json();\n          // Check the status returned by the API\n          if (data.status === \"up\") {\n            setAlive(true);\n          } else {\n            setAlive(false);\n          }\n        } else {\n          // If the API call was unsuccessful, set alive to false\n          setAlive(false);\n        }\n      } catch (error) {\n        console.error(\"API check failed\", error);\n        setAlive(false);\n      }\n    };\n\n    // Call the checkStatus function\n    checkStatus();\n    const interval = setInterval(checkStatus, 10000); // Check every 10 seconds\n    return () => clearInterval(interval); // Cleanup interval on unmount\n  }, []); // The empty array causes this effect to only run on mount and unmount\n\n  const sendMessage = async content => {\n    setIsLoading(true);\n    const userMessage = {\n      message: content,\n      direction: \"outgoing\"\n    };\n    setMessages(prevMessages => [...prevMessages, userMessage]);\n    try {\n      const response = await fetch(\"http://localhost:5000/recommend\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          message: content\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const responseData = await response.json();\n      const botMessage = {\n        message: responseData.response,\n        direction: \"incoming\" // Responses from the bot are 'incoming'\n      };\n\n      // Add the bot's response message\n      setMessages(prevMessages => [...prevMessages, botMessage]);\n    } catch (error) {\n      console.error(\"Could not send the message to the API\", error);\n    } finally {\n      setIsLoading(false); // End loading\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: alive ? /*#__PURE__*/_jsxDEV(ChatContainer, {\n      children: [/*#__PURE__*/_jsxDEV(ConversationHeader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(MessageList, {\n        typingIndicator: isLoading && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 54\n        }, this),\n        children: [\" \", messages.map((msg, index) => /*#__PURE__*/_jsxDEV(Message, {\n          model: {\n            message: msg.message,\n            direction: msg.direction\n          }\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n        placeholder: \"Type message here\",\n        onSend: sendMessage,\n        attachButton: false // Set to false if you don't want the attach button\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(ApiNotFound, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }, this)\n    }, void 0, false)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatComponent, \"UrGrQHNwjbF3YcfoiLlxlB0fHpU=\");\n_c = ChatComponent;\nexport default ChatComponent;\nvar _c;\n$RefreshReg$(_c, \"ChatComponent\");","map":{"version":3,"names":["React","useState","useEffect","ChatContainer","MessageList","MessageInput","ConversationHeader","Message","Loader","ApiNotFound","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatComponent","_s","messages","setMessages","isLoading","setIsLoading","alive","setAlive","checkStatus","response","fetch","ok","console","log","data","json","status","error","interval","setInterval","clearInterval","sendMessage","content","userMessage","message","direction","prevMessages","method","headers","body","JSON","stringify","Error","responseData","botMessage","className","children","fileName","_jsxFileName","lineNumber","columnNumber","typingIndicator","map","msg","index","model","placeholder","onSend","attachButton","_c","$RefreshReg$"],"sources":["/Users/coby/projects/movie_recommendation/cinematch/frontend/chat-app/src/components/ChatUI.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  ChatContainer,\n  MessageList,\n  MessageInput,\n  ConversationHeader,\n  Message,\n  Loader,\n} from \"@chatscope/chat-ui-kit-react\";\nimport ApiNotFound from \"./ApiNotFound.js\";\nimport \"@chatscope/chat-ui-kit-styles/dist/default/styles.min.css\"; // Ensure you import the styles\nimport \"./ChatComponent.css\"; // Import your custom CSS for this component\n\nconst ChatComponent = () => {\n  const [messages, setMessages] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [alive, setAlive] = useState(false);\n\n  useEffect(() => {\n    const checkStatus = async () => {\n      try {\n        const response = await fetch(\"http://localhost:5000/health\");\n        if (response.ok) {\n          console.log(\"API IS UP\");\n          const data = await response.json();\n          // Check the status returned by the API\n          if (data.status === \"up\") {\n            setAlive(true);\n          } else {\n            setAlive(false);\n          }\n        } else {\n          // If the API call was unsuccessful, set alive to false\n          setAlive(false);\n        }\n      } catch (error) {\n        console.error(\"API check failed\", error);\n        setAlive(false);\n      }\n    };\n\n    // Call the checkStatus function\n    checkStatus();\n\n    const interval = setInterval(checkStatus, 10000); // Check every 10 seconds\n    return () => clearInterval(interval); // Cleanup interval on unmount\n  }, []); // The empty array causes this effect to only run on mount and unmount\n\n  const sendMessage = async (content) => {\n    setIsLoading(true);\n\n    const userMessage = {\n      message: content,\n      direction: \"outgoing\",\n    };\n\n    setMessages((prevMessages) => [...prevMessages, userMessage]);\n\n    try {\n      const response = await fetch(\"http://localhost:5000/recommend\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ message: content }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const responseData = await response.json();\n      const botMessage = {\n        message: responseData.response,\n        direction: \"incoming\", // Responses from the bot are 'incoming'\n      };\n\n      // Add the bot's response message\n      setMessages((prevMessages) => [...prevMessages, botMessage]);\n    } catch (error) {\n      console.error(\"Could not send the message to the API\", error);\n    } finally {\n      setIsLoading(false); // End loading\n    }\n  };\n\n  return (\n    <div className=\"chat-container\">\n      {alive ? (\n        <ChatContainer>\n          <ConversationHeader>\n            {/* Place your conversation header content here */}\n          </ConversationHeader>\n          <MessageList typingIndicator={isLoading && <Loader />}>\n            {\" \"}\n            {/* Use typingIndicator prop for loader */}\n            {messages.map((msg, index) => (\n              <Message\n                key={index}\n                model={{\n                  message: msg.message,\n                  direction: msg.direction,\n                }}\n              />\n            ))}\n          </MessageList>\n          <MessageInput\n            placeholder=\"Type message here\"\n            onSend={sendMessage}\n            attachButton={false} // Set to false if you don't want the attach button\n          />\n        </ChatContainer>\n      ) : (\n        <>\n          <ApiNotFound />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default ChatComponent;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}