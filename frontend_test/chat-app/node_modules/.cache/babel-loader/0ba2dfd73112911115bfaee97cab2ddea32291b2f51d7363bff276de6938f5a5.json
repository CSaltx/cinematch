{"ast":null,"code":"var _jsxFileName = \"/Users/coby/projects/movie_recommendation/cinematch/frontend/chat-app/src/components/ChatUI.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { ChatContainer, MessageList, MessageInput, ConversationHeader, Message, Loader } from \"@chatscope/chat-ui-kit-react\";\nimport ApiNotFound from \"./ApiNotFound.js\";\nimport \"@chatscope/chat-ui-kit-styles/dist/default/styles.min.css\"; // Ensure you import the styles\nimport \"./ChatComponent.css\"; // Import your custom CSS for this component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ChatComponent = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [alive, setAlive] = useState(true);\n  useEffect(() => {\n    const checkStatus = async () => {\n      try {\n        fetch(\"http://127.0.0.1:5000/health\").then(response => response.json()).then(data => {\n          if (data.status === \"up\") {\n            setAlive(true);\n          } else {\n            setAlive(false);\n          }\n        }).catch(error => {\n          console.error(\"API check failed\", error);\n          setAlive(false);\n        });\n      } catch (error) {\n        console.error(\"API check failed\", error);\n        setAlive(false);\n      }\n    };\n\n    // Call the checkStatus function\n    checkStatus();\n    const interval = setInterval(checkStatus, 10000); // Check every 10 seconds\n    return () => clearInterval(interval); // Cleanup interval on unmount\n  }, []); // The empty array causes this effect to only run on mount and unmount\n\n  const sendMessage = content => {\n    setIsLoading(true);\n    const userMessage = {\n      message: content,\n      direction: \"outgoing\"\n    };\n    setMessages(prevMessages => [...prevMessages, userMessage]);\n    fetch(\"http://127.0.0.1:5000/recommend\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        message: content\n      })\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return response.json();\n    }).then(responseData => {\n      const botMessage = {\n        message: responseData.response,\n        direction: \"incoming\" // Responses from the bot are 'incoming'\n      };\n      // Add the bot's response message\n      setMessages(prevMessages => [...prevMessages, botMessage]);\n    }).catch(error => {\n      console.error(\"Could not send the message to the API\", error);\n    }).finally(() => {\n      setIsLoading(false); // End loading\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: alive ? /*#__PURE__*/_jsxDEV(ChatContainer, {\n      children: [/*#__PURE__*/_jsxDEV(ConversationHeader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(MessageList, {\n        typingIndicator: isLoading && /*#__PURE__*/_jsxDEV(Loader, {\n          className: \"loader-white\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 43\n        }, this),\n        children: [\" \", messages.map((msg, index) => /*#__PURE__*/_jsxDEV(Message, {\n          model: {\n            message: msg.message,\n            direction: msg.direction\n          }\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n        placeholder: \"Type message here\",\n        onSend: sendMessage,\n        attachButton: false // Set to false if you don't want the attach button\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(ApiNotFound, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }, this)\n    }, void 0, false)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatComponent, \"Tp6Y8EWPvbm/W1V5rs2GE05yev0=\");\n_c = ChatComponent;\nexport default ChatComponent;\nvar _c;\n$RefreshReg$(_c, \"ChatComponent\");","map":{"version":3,"names":["React","useState","useEffect","ChatContainer","MessageList","MessageInput","ConversationHeader","Message","Loader","ApiNotFound","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatComponent","_s","messages","setMessages","isLoading","setIsLoading","alive","setAlive","checkStatus","fetch","then","response","json","data","status","catch","error","console","interval","setInterval","clearInterval","sendMessage","content","userMessage","message","direction","prevMessages","method","headers","body","JSON","stringify","ok","Error","responseData","botMessage","finally","className","children","fileName","_jsxFileName","lineNumber","columnNumber","typingIndicator","map","msg","index","model","placeholder","onSend","attachButton","_c","$RefreshReg$"],"sources":["/Users/coby/projects/movie_recommendation/cinematch/frontend/chat-app/src/components/ChatUI.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  ChatContainer,\n  MessageList,\n  MessageInput,\n  ConversationHeader,\n  Message,\n  Loader,\n} from \"@chatscope/chat-ui-kit-react\";\nimport ApiNotFound from \"./ApiNotFound.js\";\nimport \"@chatscope/chat-ui-kit-styles/dist/default/styles.min.css\"; // Ensure you import the styles\nimport \"./ChatComponent.css\"; // Import your custom CSS for this component\n\nconst ChatComponent = () => {\n  const [messages, setMessages] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [alive, setAlive] = useState(true);\n\n  useEffect(() => {\n    const checkStatus = async () => {\n      try {\n        fetch(\"http://127.0.0.1:5000/health\")\n          .then((response) => response.json())\n          .then((data) => {\n            if (data.status === \"up\") {\n              setAlive(true);\n            } else {\n              setAlive(false);\n            }\n          })\n          .catch((error) => {\n            console.error(\"API check failed\", error);\n            setAlive(false);\n          });\n      } catch (error) {\n        console.error(\"API check failed\", error);\n        setAlive(false);\n      }\n    };\n\n    // Call the checkStatus function\n    checkStatus();\n\n    const interval = setInterval(checkStatus, 10000); // Check every 10 seconds\n    return () => clearInterval(interval); // Cleanup interval on unmount\n  }, []); // The empty array causes this effect to only run on mount and unmount\n\n  const sendMessage = (content) => {\n    setIsLoading(true);\n\n    const userMessage = {\n      message: content,\n      direction: \"outgoing\",\n    };\n\n    setMessages((prevMessages) => [...prevMessages, userMessage]);\n\n    fetch(\"http://127.0.0.1:5000/recommend\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ message: content }),\n    })\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        return response.json();\n      })\n      .then((responseData) => {\n        const botMessage = {\n          message: responseData.response,\n          direction: \"incoming\", // Responses from the bot are 'incoming'\n        };\n        // Add the bot's response message\n        setMessages((prevMessages) => [...prevMessages, botMessage]);\n      })\n      .catch((error) => {\n        console.error(\"Could not send the message to the API\", error);\n      })\n      .finally(() => {\n        setIsLoading(false); // End loading\n      });\n  };\n\n  return (\n    <div className=\"chat-container\">\n      {alive ? (\n        <ChatContainer>\n          <ConversationHeader>\n            {/* Place your conversation header content here */}\n          </ConversationHeader>\n          <MessageList\n            typingIndicator={isLoading && <Loader className=\"loader-white\" />}\n          >\n            {\" \"}\n            {/* Use typingIndicator prop for loader */}\n            {messages.map((msg, index) => (\n              <Message\n                key={index}\n                model={{\n                  message: msg.message,\n                  direction: msg.direction,\n                }}\n              />\n            ))}\n          </MessageList>\n          <MessageInput\n            placeholder=\"Type message here\"\n            onSend={sendMessage}\n            attachButton={false} // Set to false if you don't want the attach button\n          />\n        </ChatContainer>\n      ) : (\n        <>\n          <ApiNotFound />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default ChatComponent;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}